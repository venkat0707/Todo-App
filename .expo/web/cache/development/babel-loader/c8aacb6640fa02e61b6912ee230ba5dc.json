{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/venky/Music/main/screens/RegisterScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Yup from 'yup';\nimport Colors from \"../utils/colors\";\nimport SafeView from \"../components/SafeView\";\nimport Form from \"../components/Forms/Form\";\nimport FormField from \"../components/Forms/FormField\";\nimport FormButton from \"../components/Forms/FormButton\";\nimport IconButton from \"../components/IconButton\";\nimport FormErrorMessage from \"../components/Forms/FormErrorMessage\";\nimport { registerWithEmail } from \"../components/Firebase/firebase\";\nimport useStatusBar from \"../hooks/useStatusBar\";\nvar validationSchema = Yup.object().shape({\n  name: Yup.string().required('please enter name ').matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field Must contain 4 cha \").min(4).max(15).label('Name'),\n  email: Yup.string().required('Please enter a valid email').email().label('Email'),\n  password: Yup.string().required().matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Must Contain 8 Characters and atleast One Uppercase, One Lowercase, One Number and one special case Character\").label('Password').max(15),\n  confirmPassword: Yup.string().oneOf([Yup.ref('password')], 'Confirm Password must match Password').required('Confirm Password is required')\n});\nexport default function RegisterScreen(_ref) {\n  var navigation = _ref.navigation;\n  useStatusBar('light-content');\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      passwordVisibility = _useState2[0],\n      setPasswordVisibility = _useState2[1];\n\n  var _useState3 = useState('eye'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rightIcon = _useState4[0],\n      setRightIcon = _useState4[1];\n\n  var _useState5 = useState('eye'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmPasswordIcon = _useState6[0],\n      setConfirmPasswordIcon = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmPasswordVisibility = _useState8[0],\n      setConfirmPasswordVisibility = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      registerError = _useState10[0],\n      setRegisterError = _useState10[1];\n\n  function handlePasswordVisibility() {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  function handleConfirmPasswordVisibility() {\n    if (confirmPasswordIcon === 'eye') {\n      setConfirmPasswordIcon('eye-off');\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    } else if (confirmPasswordIcon === 'eye-off') {\n      setConfirmPasswordIcon('eye');\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    }\n  }\n\n  function handleOnSignUp(values, actions) {\n    var email, password;\n    return _regeneratorRuntime.async(function handleOnSignUp$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(registerWithEmail(email, password));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            setRegisterError(_context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }\n\n  return React.createElement(SafeView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, React.createElement(Form, {\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleOnSignUp(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, React.createElement(FormField, {\n    name: \"name\",\n    leftIcon: \"account\",\n    placeholder: \"Enter name\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    name: \"email\",\n    leftIcon: \"email\",\n    placeholder: \"Enter email\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    textContentType: \"emailAddress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    name: \"password\",\n    leftIcon: \"lock\",\n    placeholder: \"Enter password\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    secureTextEntry: passwordVisibility,\n    textContentType: \"password\",\n    rightIcon: rightIcon,\n    handlePasswordVisibility: handlePasswordVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    name: \"confirmPassword\",\n    leftIcon: \"lock\",\n    placeholder: \"Confirm password\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    secureTextEntry: confirmPasswordVisibility,\n    textContentType: \"password\",\n    rightIcon: confirmPasswordIcon,\n    handlePasswordVisibility: handleConfirmPasswordVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), React.createElement(FormButton, {\n    title: 'Register',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), React.createElement(FormErrorMessage, {\n    error: registerError,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 10\n    }\n  })), React.createElement(IconButton, {\n    style: styles.backButton,\n    iconName: \"keyboard-backspace\",\n    color: Colors.white,\n    size: 30,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    backgroundColor: Colors.mediumGrey\n  },\n  backButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginVertical: 10\n  }\n});","map":{"version":3,"sources":["/home/venky/Music/main/screens/RegisterScreen.js"],"names":["React","useState","Yup","Colors","SafeView","Form","FormField","FormButton","IconButton","FormErrorMessage","registerWithEmail","useStatusBar","validationSchema","object","shape","name","string","required","matches","min","max","label","email","password","confirmPassword","oneOf","ref","RegisterScreen","navigation","passwordVisibility","setPasswordVisibility","rightIcon","setRightIcon","confirmPasswordIcon","setConfirmPasswordIcon","confirmPasswordVisibility","setConfirmPasswordVisibility","registerError","setRegisterError","handlePasswordVisibility","handleConfirmPasswordVisibility","handleOnSignUp","values","actions","message","styles","container","backButton","white","goBack","StyleSheet","create","padding","backgroundColor","mediumGrey","justifyContent","alignItems","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport * as Yup from 'yup';\n\nimport Colors from '../utils/colors';\nimport SafeView from '../components/SafeView';\nimport Form from '../components/Forms/Form';\nimport FormField from '../components/Forms/FormField';\nimport FormButton from '../components/Forms/FormButton';\nimport IconButton from '../components/IconButton';\nimport FormErrorMessage from '../components/Forms/FormErrorMessage';\nimport { registerWithEmail } from '../components/Firebase/firebase';\nimport useStatusBar from '../hooks/useStatusBar';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('please enter name ')\n    .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed for this field Must contain 4 cha \")\n    .min(4)\n    .max(15)\n    .label('Name'),\n  email: Yup.string()\n    .required('Please enter a valid email')\n    .email()\n    .label('Email'),\n  password: Yup.string()\n    .required()\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n      \"Must Contain 8 Characters and atleast One Uppercase, One Lowercase, One Number and one special case Character\")\n    .label('Password')\n\n    .max(15),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Confirm Password must match Password')\n    .required('Confirm Password is required')\n});\n\nexport default function RegisterScreen({ navigation }) {\n  useStatusBar('light-content');\n\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n  const [confirmPasswordIcon, setConfirmPasswordIcon] = useState('eye');\n  const [confirmPasswordVisibility, setConfirmPasswordVisibility] = useState(\n    true\n  );\n  const [registerError, setRegisterError] = useState('');\n\n  function handlePasswordVisibility() {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  function handleConfirmPasswordVisibility() {\n    if (confirmPasswordIcon === 'eye') {\n      setConfirmPasswordIcon('eye-off');\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    } else if (confirmPasswordIcon === 'eye-off') {\n      setConfirmPasswordIcon('eye');\n      setConfirmPasswordVisibility(!confirmPasswordVisibility);\n    }\n  }\n\n  async function handleOnSignUp(values, actions) {\n    const { email, password } = values;\n    try {\n      await registerWithEmail(email, password);\n    } catch (error) {\n      setRegisterError(error.message);\n    }\n  }\n\n  return (\n    <SafeView style={styles.container}>\n      <Form\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n          confirmPassword: ''\n        }}\n        validationSchema={validationSchema}\n        onSubmit={values => handleOnSignUp(values)}\n      >\n        <FormField\n          name=\"name\"\n          leftIcon=\"account\"\n          placeholder=\"Enter name\"\n          autoFocus={true}\n        />\n        <FormField\n          name=\"email\"\n          leftIcon=\"email\"\n          placeholder=\"Enter email\"\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n          textContentType=\"emailAddress\"\n        />\n        <FormField\n          name=\"password\"\n          leftIcon=\"lock\"\n          placeholder=\"Enter password\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          secureTextEntry={passwordVisibility}\n          textContentType=\"password\"\n          rightIcon={rightIcon}\n          handlePasswordVisibility={handlePasswordVisibility}\n        />\n        <FormField\n          name=\"confirmPassword\"\n          leftIcon=\"lock\"\n          placeholder=\"Confirm password\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          secureTextEntry={confirmPasswordVisibility}\n          textContentType=\"password\"\n          rightIcon={confirmPasswordIcon}\n          handlePasswordVisibility={handleConfirmPasswordVisibility}\n        />\n        <FormButton title={'Register'} />\n        {<FormErrorMessage error={registerError} visible={true} />}\n      </Form>\n      <IconButton\n        style={styles.backButton}\n        iconName=\"keyboard-backspace\"\n        color={Colors.white}\n        size={30}\n        onPress={() => navigation.goBack()}\n      />\n    </SafeView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    backgroundColor: Colors.mediumGrey\n  },\n  backButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginVertical: 10\n  }\n});\n"]},"metadata":{},"sourceType":"module"}