{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/venky/Music/main/screens/LoginScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Yup from 'yup';\nimport Colors from \"../utils/colors\";\nimport SafeView from \"../components/SafeView\";\nimport Form from \"../components/Forms/Form\";\nimport FormField from \"../components/Forms/FormField\";\nimport FormButton from \"../components/Forms/FormButton\";\nimport IconButton from \"../components/IconButton\";\nimport { loginWithEmail } from \"../components/Firebase/firebase\";\nimport FormErrorMessage from \"../components/Forms/FormErrorMessage\";\nimport useStatusBar from \"../hooks/useStatusBar\";\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required('Please enter a registered email').email().label('Email')\n});\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  useStatusBar('light-content');\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      passwordVisibility = _useState2[0],\n      setPasswordVisibility = _useState2[1];\n\n  var _useState3 = useState('eye'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rightIcon = _useState4[0],\n      setRightIcon = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loginError = _useState6[0],\n      setLoginError = _useState6[1];\n\n  function handlePasswordVisibility() {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  function handleOnLogin(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function handleOnLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(loginWithEmail(email, password));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            setLoginError(_context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }\n\n  return React.createElement(SafeView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(Form, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleOnLogin(values);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, React.createElement(FormField, {\n    name: \"email\",\n    leftIcon: \"email\",\n    placeholder: \"Enter email\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    textContentType: \"emailAddress\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    name: \"password\",\n    leftIcon: \"lock\",\n    placeholder: \"Enter password\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    secureTextEntry: passwordVisibility,\n    textContentType: \"password\",\n    rightIcon: rightIcon,\n    handlePasswordVisibility: handlePasswordVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }), React.createElement(FormButton, {\n    title: 'Login',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), React.createElement(FormErrorMessage, {\n    error: loginError,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 10\n    }\n  })), React.createElement(View, {\n    style: styles.footerButtonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.navigate('ForgotPassword');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.forgotPasswordButtonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"Forgot Password?\"))), React.createElement(IconButton, {\n    style: styles.backButton,\n    iconName: \"keyboard-backspace\",\n    color: \"#fff\",\n    size: 30,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    backgroundColor: Colors.mediumGrey\n  },\n  footerButtonContainer: {\n    marginVertical: 15,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  forgotPasswordButtonText: {\n    color: Colors.white\n  },\n  backButton: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["/home/venky/Music/main/screens/LoginScreen.js"],"names":["React","useState","Yup","Colors","SafeView","Form","FormField","FormButton","IconButton","loginWithEmail","FormErrorMessage","useStatusBar","validationSchema","object","shape","email","string","required","label","LoginScreen","navigation","passwordVisibility","setPasswordVisibility","rightIcon","setRightIcon","loginError","setLoginError","handlePasswordVisibility","handleOnLogin","values","password","message","styles","container","footerButtonContainer","navigate","forgotPasswordButtonText","backButton","goBack","StyleSheet","create","padding","backgroundColor","mediumGrey","marginVertical","justifyContent","alignItems","color","white"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, TouchableOpacity, Text, View } from 'react-native';\nimport * as Yup from 'yup';\n\nimport Colors from '../utils/colors';\nimport SafeView from '../components/SafeView';\nimport Form from '../components/Forms/Form';\nimport FormField from '../components/Forms/FormField';\nimport FormButton from '../components/Forms/FormButton';\nimport IconButton from '../components/IconButton';\nimport { loginWithEmail } from '../components/Firebase/firebase';\nimport FormErrorMessage from '../components/Forms/FormErrorMessage';\nimport useStatusBar from '../hooks/useStatusBar';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Please enter a registered email')\n    .email()\n    .label('Email'),\n\n});\n\nexport default function LoginScreen({ navigation }) {\n  useStatusBar('light-content');\n\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n  const [loginError, setLoginError] = useState('');\n\n  function handlePasswordVisibility() {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  }\n\n  async function handleOnLogin(values) {\n    const { email, password } = values;\n\n    try {\n      await loginWithEmail(email, password);\n    } catch (error) {\n      setLoginError(error.message);\n    }\n  }\n\n  return (\n    <SafeView style={styles.container}>\n      <Form\n        initialValues={{ email: '', password: '' }}\n        validationSchema={validationSchema}\n        onSubmit={values => handleOnLogin(values)}\n      >\n        <FormField\n          name=\"email\"\n          leftIcon=\"email\"\n          placeholder=\"Enter email\"\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n          textContentType=\"emailAddress\"\n          autoFocus={true}\n        />\n        <FormField\n          name=\"password\"\n          leftIcon=\"lock\"\n          placeholder=\"Enter password\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          secureTextEntry={passwordVisibility}\n          textContentType=\"password\"\n          rightIcon={rightIcon}\n          handlePasswordVisibility={handlePasswordVisibility}\n        />\n        <FormButton title={'Login'} />\n        {<FormErrorMessage error={loginError} visible={true} />}\n      </Form>\n      <View style={styles.footerButtonContainer}>\n        <TouchableOpacity onPress={() => navigation.navigate('ForgotPassword')}>\n          <Text style={styles.forgotPasswordButtonText}>Forgot Password?</Text>\n        </TouchableOpacity>\n      </View>\n      <IconButton\n        style={styles.backButton}\n        iconName=\"keyboard-backspace\"\n        color=\"#fff\"\n        size={30}\n        onPress={() => navigation.goBack()}\n      />\n    </SafeView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 15,\n    backgroundColor: Colors.mediumGrey\n  },\n  footerButtonContainer: {\n    marginVertical: 15,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  forgotPasswordButtonText: {\n    color: Colors.white\n    //fontSize: 18,\n    //fontWeight: '600'\n  },\n  backButton: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}